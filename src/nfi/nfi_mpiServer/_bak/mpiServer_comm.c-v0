
/*
 *  Copyright 2020-2022 Felix Garcia Carballeira, Diego Camarmas Alonso, Alejandro Calderon Mateos, Luis Miguel Sanchez Garcia, Borja Bergua Guerra
 *
 *  This file is part of mpiServer.
 *
 *  mpiServer is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  mpiServer is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with mpiServer.  If not, see <http://www.gnu.org/licenses/>.
 *
 */


   /* ... Include / Inclusion ........................................... */

      #include "mpiServer_comm.h"
      #include <dlfcn.h>


   /* ... Constants / Constantes ........................................ */

      /* ENVIROMENT VARIABLE: DNS SERVICE */
      #define MPISERVER_FILE         "MPISERVER_FILE"
      #define MPISERVER_FILE_DEFAULT "/etc/xpn/mpiServer.dns"

      /* Nuevo */
      #define CONST_TEMP              1024
      #define MAX_MPISERVER_NODES      256


   /* ... Global variables / Variables globales ......................... */

      static int load = 0;


   /* ... Functions / Funciones ......................................... */

      /*
       * Debug
       */

#ifdef DBG_COMM
  #define dbgcomm_error(...)    fprintf(stderr, __VA_ARGS__)
  #define dbgcomm_warning(...)  fprintf(stderr, __VA_ARGS__)
  #define dbgcomm_info(...)     fprintf(stdout, __VA_ARGS__)
#else
  #define dbgcomm_error(...)
  #define dbgcomm_warning(...)
  #define dbgcomm_info(...)
#endif

      /*
       * Communication
       */

      int mpiServer_connect ( char *server ) // TODO: server is not used right now...
      {
	    client_stub_t wb ;
	    int ret, provided ;
	    MPI_Status status ;

	    // MPI_Init
	    ret = MPI_Init_thread(NULL, NULL, MPI_THREAD_MULTIPLE, &provided) ;  // TODO: receive argc and argv from upper layers
	    if (MPI_SUCCESS != ret) {
		mfs_print(DBG_ERROR, "Client[%d]: MPI_Init fails :-(", wb.rank) ;
		return -1 ;
	    } // TODO: we really need to do MPI_Init_thread each time we connect? 

	    // wb.size = comm_size()
	    ret = MPI_Comm_size(MPI_COMM_WORLD, &(wb.size)) ;
	    if (MPI_SUCCESS != ret) {
		mfs_print(DBG_ERROR, "Client[%d]: MPI_Comm_size fails :-(", wb.rank) ;
		return -1 ;
	    }

	    // wb.rank = comm_rank()
	    ret = MPI_Comm_rank(MPI_COMM_WORLD, &(wb.rank)) ;
	    if (MPI_SUCCESS != ret) {
		mfs_print(DBG_ERROR, "Client[%d]: MPI_Comm_rank fails :-(", wb.rank) ;
		return -1 ;
	    }

	    // Lookup port name
	    sprintf(wb.srv_name, "%s.%d", MFS_SERVER_STUB_PNAME, wb.rank) ;

	    ret = MPI_Lookup_name(wb.srv_name, MPI_INFO_NULL, wb.port_name) ;
	    if (MPI_SUCCESS != ret) {
		mfs_print(DBG_ERROR, "Server[%d]: MPI_Lookup_name fails :-(", wb.rank) ;
		return -1 ;
	    }

	    // Connect...
	    ret = MPI_Comm_connect(wb.port_name, MPI_INFO_NULL, 0, MPI_COMM_SELF, &(wb.server)) ;
	    if (MPI_SUCCESS != ret) {
		mfs_print(DBG_ERROR, "Client[%d]: MPI_Comm_connect fails :-(", wb.rank) ;
		return -1 ;
	    }

	    // Return comm as integer
	    return (int)(wb.server) ;  // TODO: wb.server is on the stack so probably is better idea to malloc or receive from upper layers
      }

      int mpiServer_finalize ( client_stub_t *wb )  // TODO: check how can be called within xpn-nfi component
      {
          int ret ;

          // Remote disconnect...
          ret = clientstub_request(wb, REQ_ACTION_DISCONNECT, 0, 0) ;
          if (MPI_SUCCESS != ret) {
              return -1 ;
          }

          // Disconnect...
          ret = MPI_Comm_disconnect(&(wb->server)) ;
          if (MPI_SUCCESS != ret) {
              mfs_print(DBG_ERROR, "Client[%d]: MPI_Comm_disconnect fails :-(", wb->rank) ;
              return -1 ;
          }

          // Finalize...
          ret = MPI_Finalize() ;
          if (MPI_SUCCESS != ret) {
              mfs_print(DBG_ERROR, "Client[%d]: MPI_Finalize fails :-(", wb->rank) ;
              return -1 ;
          }

          // Return OK
          return 1 ;
      }



int clientstub_request ( client_stub_t *wb, int req_action, int req_arg1, int req_arg2 )
{
    int ret ;
    int buff[3] ;

    // pack msg fields
    buff[0] = req_action ;
    buff[1] = req_arg1 ;
    buff[2] = req_arg2 ;

    // send msg
    ret = MPI_Send(buff, 3, MPI_INT, 0, 0, wb->server) ;
    if (MPI_SUCCESS != ret) {
        mfs_print(DBG_ERROR, "Client[%d]: MPI_Send fails :-(", wb->rank) ;
        return -1 ;
    }

    // Return OK/KO
    return ret ;
}





      ssize_t mpiServer_write_data ( int fd, char *data, ssize_t size, char *id )
      {
	int ret = 0;
	int cont = 0;

	dbgcomm_info("[NFI_COMM]client: write_data(%d): %d ID=%s --th:%d--\n",fd,size,id,(int)pthread_self());

	if (size == 0){
	    return  0;
	}
	if (size < 0){
	    return  -1;
	}

	do{
		ssize_t (*real_write)(int, const void*, size_t);
		real_write = dlsym(RTLD_NEXT,"write");
		ret = real_write(fd, data+cont, size-cont);

	        dbgcomm_info("[NFI_COMM]client: write_data(%d): %d = %d ID=%s --th:%d--\n",fd,size,ret,id,(int)pthread_self());
                if(ret <= 0){
                        perror("client: Error write_comm:");
                }
		cont += ret;
	} while ((ret>0)&&(cont!=size));
	
	if (ret == -1)
	{
		dbgcomm_info("[NFI_COMM]client: write_data(%d): err %d  ID=%s --th:%d--\n",fd,ret,id,(int)pthread_self());
		perror("client: write_data");
		return ret;
	}
	dbgcomm_info("[NFI_COMM]client: write_data(%d): %d de %d ID=%s --th:%d--\n",fd,cont,size,id,(int)pthread_self());

	return size;
      }

      ssize_t mpiServer_read_data ( int fd, char *data, ssize_t size, char *id )
      {
	   int ret = 0;
	   int cont = 0;

	   dbgcomm_info("[NFI_COMM]client: read_data(%d): %d ID=%s --th:%d--\n",fd,size,id,(int)pthread_self());

	   if (size == 0) {
	   	return  0;
	   }
	   if (size < 0) {
		return  -1;
	   }

	   do{
		ssize_t (*real_read)(int, void*, size_t);
		real_read = dlsym(RTLD_NEXT,"read");
		ret = real_read(fd, data+cont, size-cont);

	        dbgcomm_info("[NFI_COMM]client: read_data(%d): %d = %d ID=%s --th:%d--\n",fd,size,ret,id,(int)pthread_self());
                if(ret <= 0){
                        perror("client: Error read_comm:");
                }
		cont += ret;
	   } while ((ret>0)&&(cont!= size));

	   if (ret == -1) {
		dbgcomm_info("[NFI_COMM]client: read_data(%d): err %d  ID=%s --th:%d--\n",fd,ret,id,(int)pthread_self());
		perror("client: read_data");
		return ret;
	   }
	   dbgcomm_info("[NFI_COMM]client: read_data(%d): %d de %d ID=%s --th:%d--\n",fd,cont,size,id,(int)pthread_self());

	   return size;
      }


   /* ................................................................... */


//#include "myServer.h"
#include "myServer_ops.h"
#include "myServer_comm.h"
#include "myServer_d2xpn.h"


int aux_clear_dirs(char *path){
	int i, j;
	char ant = '\0', s[255];
	
	j=0;
	for(i=0;i < strlen(path); i++){
		switch(path[i]){
			case '/':
				if(ant != '/'){
					ant = s[j] = '/';
					j++;
				}
				break;
			default:
				ant = s[j] = path[i];
				j++;
				
		}

		s[j] = '\0';
	}
	
	strcpy(path, s);
	return 0;
}

int aux_get_dirs(char *path, int n, char *s){
	int i=0, j=0, ant=-1, pos=-1;
	int cont=-1;
	char new_path[MAXPATHLEN];
	
	strcpy(new_path, path);
	
	path = new_path;
	aux_clear_dirs(path);	
	s[0] = '\0';	
	if (path == NULL) {
		return 0;	
	}
	
	for(i=0; i<strlen(path) && cont<(n+1); i++){
		if (path[i] == '/'){
			if(ant == -1){
				ant = pos = i;
			}
			pos = i;
			cont++;
		}
	}

	if(cont<(n+1)){
		return 0;
	}
	
	for(j=ant; j<pos; j++){
		s[j] = path[j];
	}
	
	s[j] = '\0';
		
	return strlen(s);
}



int myServer_create_spacename(char *path){
	char dir[MAXPATHLEN];
	int i;
#ifdef _DBG_	
	printf("%s)myServer_create_spacename: %s\n", MYSERVER_ALIAS_NAME_STRING, path);
#endif
	
	for(i=0; 0 != aux_get_dirs(path, i, dir);i++){
		mkdir(dir, 0777);
	}
	return 0;
}

/* OPERATIONAL FUNCTIONS */

/********************************** 
Read the operation to realize 
***********************************/
int myServer_read_operation(int sd, struct st_myServer_msg *head){
	int ret;

#ifdef _DBG_	
	printf("%s)antes de read_operation: sd=%d\n ", MYSERVER_ALIAS_NAME_STRING,sd);
	fflush(stdout);
#endif
	ret = myServer_comm_readdata(sd, (char *)&head->type, sizeof(int));
	if(ret == -1){
		return -1;
	}
	
#ifdef _DBG_	
	printf("%s)read_operation: %d sd=%d,id=%d\n", MYSERVER_ALIAS_NAME_STRING,head->type,sd,head->id);
	fflush(stdout);
#endif
	ret = myServer_comm_readdata(sd, (char *)&head->id, sizeof(int));
	if(ret == -1){
		return -1;
	}
	
#ifdef _DBG_	
	printf("%s)read_operation: %d from sd=%d,id=%d\n", MYSERVER_ALIAS_NAME_STRING,head->type, sd,head->id);
	fflush(stdout);
#endif
	switch(head->type){
case MYSERVER_OPEN_FILE: 
#ifdef _DBG_	
	printf("%s)OPEN operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
	ret = myServer_comm_readdata(sd, (char *)&(head->u_st_myServer_msg.op_open), sizeof(struct st_myServer_open));
	if(ret == -1){
		return -1;
	}
	break;
case MYSERVER_CREAT_FILE: 
#ifdef _DBG_	
	printf("%s)CREAT operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
	ret = myServer_comm_readdata(sd, (char *)&(head->u_st_myServer_msg.op_creat), sizeof(struct st_myServer_creat));
	if(ret == -1){
		return -1;
	}
	break;
case MYSERVER_READ_FILE:
#ifdef _DBG_	
	printf("%s)READ operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
	ret = myServer_comm_readdata(sd, (char *)&(head->u_st_myServer_msg.op_read), sizeof(struct st_myServer_read));
	if(ret == -1){
		return -1;
	}
	break;
case MYSERVER_WRITE_FILE: 
#ifdef _DBG_	
	printf("%s)WRITE operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
	ret = myServer_comm_readdata(sd, (char *)&(head->u_st_myServer_msg.op_write), sizeof(struct st_myServer_write));
	if(ret == -1){
		return -1;
	}
	break;
case MYSERVER_CLOSE_FILE: 
#ifdef _DBG_	
	printf("%s)CLOSE operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
	ret = myServer_comm_readdata(sd, (char *)&(head->u_st_myServer_msg.op_close), sizeof(struct st_myServer_close));
	if(ret == -1){
		return -1;
	}
	break;
case MYSERVER_RM_FILE:    
#ifdef _DBG_	
	printf("%s)RM operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
	ret = myServer_comm_readdata(sd, (char *)&(head->u_st_myServer_msg.op_rm), sizeof(struct st_myServer_rm));
	if(ret == -1){
		return -1;
	}
	break;
case MYSERVER_GETATTR_FILE:    
#ifdef _DBG_	
	printf("%s)GETATTR operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
	ret = myServer_comm_readdata(sd, (char *)&(head->u_st_myServer_msg.op_getattr), sizeof(struct st_myServer_getattr));
	if(ret == -1){
		return -1;
	}
	break;
case MYSERVER_SETATTR_FILE:    
#ifdef _DBG_	
	printf("%s)SETATTR operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
	ret = myServer_comm_readdata(sd, (char *)&(head->u_st_myServer_msg.op_setattr), sizeof(struct st_myServer_setattr));
	if(ret == -1){
		return -1;
	}
	break;
case MYSERVER_MKDIR_DIR: 
#ifdef _DBG_	
	printf("%s)MKDIR operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
	ret = myServer_comm_readdata(sd, (char *)&(head->u_st_myServer_msg.op_mkdir), sizeof(struct st_myServer_mkdir));
	if(ret == -1){
		return -1;
	}
	break;
case MYSERVER_RMDIR_DIR: 
#ifdef _DBG_	
	printf("%s)RMDIR operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
	ret = myServer_comm_readdata(sd, (char *)&(head->u_st_myServer_msg.op_rmdir), sizeof(struct st_myServer_rmdir));
	if(ret == -1){
		return -1;
	}
	break;
case MYSERVER_FLUSH_FILE: 
#ifdef _DBG_	
	printf("%s)FLUSH operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
	ret = myServer_comm_readdata(sd, (char *)&(head->u_st_myServer_msg.op_flush), sizeof(struct st_myServer_flush));
	if(ret == -1){
		return -1;
	}
	break;
case MYSERVER_PRELOAD_FILE: 
#ifdef _DBG_	
	printf("%s)PRELOAD operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
	ret = myServer_comm_readdata(sd, (char *)&(head->u_st_myServer_msg.op_preload), sizeof(struct st_myServer_preload));
	if(ret == -1){
		return -1;
	}
	break;
case MYSERVER_FINALIZE:   
#ifdef _DBG_	
	printf("%s)FINALIZE operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
	break;
case MYSERVER_END:
#ifdef _DBG_	
	printf("%s)END operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
	break;
		
	}
	return head->type;
}


void myServer_op_open(int sd, struct st_myServer_msg *head){
	int fd;
	char s[255];
	
	//sprintf(s,"%s", head->u_st_myServer_msg.op_open.path);
	strcpy(s,head->u_st_myServer_msg.op_open.path);

#ifdef _DBG_	
	printf("%s> begin open(%s) sd=%d,id=%d -> %d\n",MYSERVER_ALIAS_NAME_STRING,s,sd,head->id,fd);
#endif		
	
	fd = open(s, O_RDWR);
	//if(fd == -1){
	//	myServer_create_spacename(s);
	//}	
#ifdef _DBG_
	printf("%s> end open(%s) sd=%d,id=%d ->%d\n",MYSERVER_ALIAS_NAME_STRING,s, sd, head->id, fd);	
#endif	
	myServer_comm_writedata(sd,(char *)&fd,sizeof(int));
#ifdef _DBG_	
	printf("%s)OPEN operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
}





void myServer_op_creat(int sd, struct st_myServer_msg *head){
	int fd;
	char s[255];

	
	//sprintf(s,"%s", head->u_st_myServer_msg.op_creat.path);
	strcpy(s,head->u_st_myServer_msg.op_creat.path);
	
#ifdef _DBG_	
	printf("%s)begin creat(%s) sd=%d,id=%d ->\n",MYSERVER_ALIAS_NAME_STRING,s,sd,head->id);
#endif		
	fd = open(s, O_CREAT | O_TRUNC | O_RDWR, 0666);
	if(fd == -1){
		myServer_create_spacename(s);
	        fd = open(s, O_CREAT | O_TRUNC | O_RDWR, 0666);
	}	
	
#ifdef _DBG_	
	printf("%s)end creat(%s) sd=%d,id=%d -> %d\n",MYSERVER_ALIAS_NAME_STRING,s,sd,head->id,fd);
#endif		
	
	myServer_comm_writedata(sd,(char *)&fd,sizeof(int));
#ifdef _DBG_	
	printf("%s)end CREAT operation from sd=%d,id=%d ->%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id,fd);
#endif
}


void myServer_op_flush(int sd, struct st_myServer_msg *head){
	int ret = 0;
	//char s_exe[1024];

	
	//sprintf(s,"%s", head->u_st_myServer_msg.op_creat.path);
	//strcpy(s,head->u_st_myServer_msg.op_flush.path);
	
#ifdef _DBG_	
	printf("%s)open flush(%s) sd=%d,id=%d ->\n",MYSERVER_ALIAS_NAME_STRING, head->u_st_myServer_msg.op_flush.virtual_path, sd,head->id);
#endif	
/*	
	sprintf(s_exe,"%s %s %s\n", MYSERVER_FLUSH_EXE, 
				head->u_st_myServer_msg.op_flush.virtual_path,
				head->u_st_myServer_msg.op_flush.storage_path);
#ifdef _DBG_	
	printf("begin system->%s\n",s_exe);
#endif	
	ret = system(s_exe);
#ifdef _DBG_	
	printf("end system->%s\n",s_exe);
#endif	

#ifdef _DBG_	
	printf("%s)open flush(%s) sd=%d,id=%d -> %d\n",MYSERVER_ALIAS_NAME_STRING, 
							head->u_st_myServer_msg.op_flush.virtual_path, 
							sd, head->id,ret);
#endif		
*/	
	myServer_comm_writedata(sd, (char *)&ret, sizeof(int));
#ifdef _DBG_	
	printf("%s)end FLUSH operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
}


void myServer_op_preload(int sd, struct st_myServer_msg *head){
	int ret;
	//char s_exe[1024];

	
	//sprintf(s,"%s", head->u_st_myServer_msg.op_creat.path);
	//strcpy(s,head->u_st_myServer_msg.op_flush.path);
	
#ifdef _DBG_	
	printf("%s)begin preload(%s) sd=%d,id=%d ->\n",MYSERVER_ALIAS_NAME_STRING, 
							head->u_st_myServer_msg.op_preload.virtual_path,
							sd, head->id);
#endif		

/**************************************************************************

	sprintf(s_exe,"echo \"%s %s %s\" >> ${HOME}/tmp/d2xpn_exe.$$.log",MYSERVER_PRELOAD_EXE,
                                head->u_st_myServer_msg.op_preload.virtual_path,
                                head->u_st_myServer_msg.op_preload.storage_path);

	sprintf(s_exe,"%s;%s %s %s >> ${HOME}/tmp/d2xpn_exe.$$.log \n", 
				s_exe,
				MYSERVER_PRELOAD_EXE, 
				head->u_st_myServer_msg.op_preload.virtual_path,
				head->u_st_myServer_msg.op_preload.storage_path);
****************************************************************************/

/***********************************************************************
	sprintf(s_exe,"%s %s %s >> ${HOME}/tmp/d2xpn_exe.$$.log \n", 
				MYSERVER_PRELOAD_EXE, 
				head->u_st_myServer_msg.op_preload.virtual_path,
				head->u_st_myServer_msg.op_preload.storage_path);
************************************************************************/

/***********************************************************************
	sprintf(s_exe,"%s %s %s \n", 
				MYSERVER_PRELOAD_EXE, 
				head->u_st_myServer_msg.op_preload.virtual_path,
				head->u_st_myServer_msg.op_preload.storage_path);

#ifdef _DBG_
	printf("begin system(%s)\n",s_exe);
#endif
	ret = system(s_exe);
#ifdef _DBG_
	printf("end system(%s)\n",s_exe);
#endif

**************************************************************************/


	ret = myServer_d2xpn(head->u_st_myServer_msg.op_preload.virtual_path,
                             head->u_st_myServer_msg.op_preload.storage_path);


#ifdef _DBG_	
	printf("%s)end preload(%s) sd=%d,id=%d -> %d\n",MYSERVER_ALIAS_NAME_STRING, 
							head->u_st_myServer_msg.op_preload.virtual_path,
							sd, head->id, ret);
#endif		

#ifdef _DBG_	
#endif		
	
	myServer_comm_writedata(sd, (char *)&ret, sizeof(int));
#ifdef _DBG_	
	printf("%s)end PRELOAD operation from sd=%d,id=%d\n", MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
}




void myServer_op_close(int sd, struct st_myServer_msg *head){
#ifdef _DBG_	
	printf("%s)begin close: fd %d sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,
							head->u_st_myServer_msg.op_close.fd,
							sd,head->id);
#endif		
	
	close(head->u_st_myServer_msg.op_close.fd);
#ifdef _DBG_	
	printf("%s)end close: fd %d sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,
							head->u_st_myServer_msg.op_close.fd,
							sd,head->id);
#endif		

#ifdef _DBG_	
	printf("%s)end CLOSE operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
}


void myServer_op_rm(int sd, struct st_myServer_msg *head){
	char s[255];

	//sprintf(s,"%s", head->u_st_myServer_msg.op_rm.path);
	strcpy(s, head->u_st_myServer_msg.op_rm.path);

#ifdef _DBG_	
	printf("%s)begin unlink: path %s sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING, 
						head->u_st_myServer_msg.op_rm.path,
						sd,head->id);
#endif		
	unlink(s);
#ifdef _DBG_	
	printf("%s)end unlink: path %s sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING, 
						head->u_st_myServer_msg.op_rm.path,
						sd,head->id);
#endif		
#ifdef _DBG_	
	printf("%s)end RM operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
}

void myServer_op_read(int sd, struct st_myServer_msg *head){
	int size_req, size = 0, cont = 0;
	char buffer[MAX_BUFFER_SIZE];
	//char *buffer;
	struct st_myServer_read_req req;
	

	//
	
#ifdef _DBG_	
	printf("%s)begin read: fd %d sd=%d,id=%dn",MYSERVER_ALIAS_NAME_STRING, 
						head->u_st_myServer_msg.op_read.fd,
						sd,head->id);	
#endif

/*
#ifdef _LARGEFILE64_ 
	printf("%s)op_read: offset %lld\n",MYSERVER_ALIAS_NAME_STRING,head->u_st_myServer_msg.op_read.offset);
#else
	printf("%s)op_read: offset %d\n",MYSERVER_ALIAS_NAME_STRING,(int)head->u_st_myServer_msg.op_read.offset);
#endif
	printf("%s)op_read: size %d\n",MYSERVER_ALIAS_NAME_STRING,head->u_st_myServer_msg.op_read.size);
#endif		
*/

	//buffer = (char *)malloc(head->u_st_myServer_msg.op_read.size);
	//t1 = MPI_Wtime();
	do{	
#ifdef _LARGEFILE64_	
	lseek64(head->u_st_myServer_msg.op_read.fd, 
			head->u_st_myServer_msg.op_read.offset+cont,
			0);
#else
	lseek(head->u_st_myServer_msg.op_read.fd, 
			head->u_st_myServer_msg.op_read.offset+cont,
			0);
#endif

	size_req = (head->u_st_myServer_msg.op_read.size - cont);
	if(size_req>MAX_BUFFER_SIZE){
		size_req = MAX_BUFFER_SIZE;
	}

	
	size = read(head->u_st_myServer_msg.op_read.fd,
	 			buffer,
          			size_req);
			
	if(size < 0){
		perror("read:");
	}	
	req.size = size;
	cont += size;
	if((cont == head->u_st_myServer_msg.op_read.size) ||
		(size < size_req)){
		req.last = 1;
	}else{
		req.last = 0;
	}
	myServer_comm_writedata(sd, (char *)&req, sizeof(struct st_myServer_read_req));
#ifdef _DBG_	
	printf("%s)op_read: send size %d\n",MYSERVER_ALIAS_NAME_STRING,size);
#endif		

	if(size > 0){
		myServer_comm_writedata(sd, (char *)buffer, size);
#ifdef _DBG_	
	printf("%s)op_read: send data\n",MYSERVER_ALIAS_NAME_STRING);
#endif		
	}
	}while((size >0)&&(!req.last));
	//t2 = MPI_Wtime();
#ifdef _DBG_	
	printf("%s)end read: fd %d sd=%d,id=%dn",MYSERVER_ALIAS_NAME_STRING, 
						head->u_st_myServer_msg.op_read.fd,
						sd,head->id);	
#endif
	
#ifdef _DBG_	
	//printf("%s)op_read: %f sec.\n",MYSERVER_ALIAS_NAME_STRING,t2 - t1);
	printf("%s)op_read: new_size %d\n",MYSERVER_ALIAS_NAME_STRING,size);
#endif		
	//free(buffer);

#ifdef _DBG_	
	printf("%s)end READ operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
}

void myServer_op_write(int sd, struct st_myServer_msg *head){
	char buffer[MAX_BUFFER_SIZE];
	//char *buffer;
	int cont =0 ,size =0;
	struct st_myServer_write_req req;

#ifdef _DBG_	
	printf("%s)begin write: fd %d sd=%d,id=%dn",MYSERVER_ALIAS_NAME_STRING, 
						head->u_st_myServer_msg.op_write.fd,
						sd,head->id);	
#endif
/*
#ifdef _DBG_	
	printf("%s)op_write: fd %d\n",MYSERVER_ALIAS_NAME_STRING,head->u_st_myServer_msg.op_write.fd);
#ifdef _LARGEFILE64_ 
	printf("%s)op_write: offset %lld\n",MYSERVER_ALIAS_NAME_STRING,head->u_st_myServer_msg.op_write.offset);
#else
	printf("%s)op_write: offset %d\n",MYSERVER_ALIAS_NAME_STRING,(int)head->u_st_myServer_msg.op_write.offset);
#endif
	printf("%s)op_write: size %d\n",MYSERVER_ALIAS_NAME_STRING,head->u_st_myServer_msg.op_write.size);
#endif
*/	
	//t1 = MPI_Wtime();

	do{
	size = (head->u_st_myServer_msg.op_write.size - cont);
	if(size>MAX_BUFFER_SIZE){
		size= MAX_BUFFER_SIZE;
	}
	
	if(size == 0)
		break;
	
	myServer_comm_readdata(sd,(char *)buffer, size);

#ifdef _LARGEFILE64_	
	lseek64(head->u_st_myServer_msg.op_write.fd, 
			head->u_st_myServer_msg.op_write.offset+cont,
			0);
#else
	lseek(head->u_st_myServer_msg.op_write.fd, 
			head->u_st_myServer_msg.op_write.offset+cont,
			0);
#endif

	req.size = write(head->u_st_myServer_msg.op_write.fd,
			  buffer,
		          size);
	
	cont += size;
	}while(req.size>0);
	
	if(req.size>=0){
		req.size = head->u_st_myServer_msg.op_write.size;
	}
	myServer_comm_writedata(sd,(char *)&req,sizeof(struct st_myServer_write_req));
	#ifdef _DBG_	
		printf("%s)op_write: %d\n",MYSERVER_ALIAS_NAME_STRING, req.size);
	#endif		
#ifdef _DBG_	
	printf("%s)end write: fd %d sd=%d,id=%dn",MYSERVER_ALIAS_NAME_STRING, 
						head->u_st_myServer_msg.op_write.fd,
						sd,head->id);	
#endif
#ifdef _DBG_	
	printf("%s)end WRITE operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
	
}

void myServer_op_mkdir(int sd, struct st_myServer_msg *head){
	char s[255];
	int ret;

	//sprintf(s,"%s/", head->u_st_myServer_msg.op_mkdir.path);
	strcpy(s, head->u_st_myServer_msg.op_mkdir.path);
	
	ret = mkdir(s, 0777);
	myServer_comm_writedata(sd,(char *)&ret,sizeof(int));
#ifdef _DBG_	
	printf("%s)end MKDIR operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
}

void myServer_op_rmdir(int sd, struct st_myServer_msg *head){
	char s[255];
	int ret;
	//sprintf(s,"%s/", head->u_st_myServer_msg.op_rmdir.path);
	strcpy(s, head->u_st_myServer_msg.op_rmdir.path);
	ret = rmdir(s);
	myServer_comm_writedata(sd,(char *)&ret,sizeof(int));
#ifdef _DBG_	
	printf("%s)end RMDIR operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
}

void myServer_op_setattr(int sd, struct st_myServer_msg *head){



}

void myServer_op_getattr(int sd, struct st_myServer_msg *head){
	char s[255];
	struct st_myServer_attr_req req;

#ifdef _DBG_	
	printf("%s)begin getattr(%s) sd=%d,id=%dn",MYSERVER_ALIAS_NAME_STRING, 
						head->u_st_myServer_msg.op_getattr.path,	
						sd,head->id);	
#endif
	//sprintf(s,"%s/", head->u_st_myServer_msg.op_rmdir.path);
	strcpy(s, head->u_st_myServer_msg.op_getattr.path);
	req.status = stat(s, &req.attr);
	myServer_comm_writedata(sd,(char *)&req,sizeof(struct st_myServer_attr_req));
#ifdef _DBG_	
	printf("%s)end getattr(%s) sd=%d,id=%dn",MYSERVER_ALIAS_NAME_STRING, 
						head->u_st_myServer_msg.op_getattr.path,	
						sd,head->id);	
#endif
#ifdef _DBG_	
	printf("%s)end GETATTR operation from sd=%d,id=%d\n",MYSERVER_ALIAS_NAME_STRING,sd,head->id);
#endif
}
